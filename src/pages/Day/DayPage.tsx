import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';
import IncomeList from '../../components/IncomeList/IncomeList';
import CostList from '../../components/CostList/CostList';
import AddTransactionModal from '../../components/AddTransactionModal/AddTransactionModal';
import { createTransaction, fetchTransactionsToday, deleteTransaction } from '../../utils/api';
import styles from './styles';

// –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
interface Transaction {
  id: string;
  name: string;
  amount: number;
}

const DayPage: React.FC = ({ navigation }) => {
  const [incomes, setIncomes] = useState<Transaction[]>([]);
  const [costs, setCosts] = useState<Transaction[]>([]);
  const [isIncomeModalVisible, setIncomeModalVisible] = useState<boolean>(false);
  const [isCostModalVisible, setCostModalVisible] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadTransactions = async () => {
      setIsLoading(true);
      try {
        const response = await fetchTransactionsToday();
        console.log('Fetch transactions response:', response);

        const transactions = Array.isArray(response) ? response : response.data || [];
        console.log('Transactions:', transactions);

        const fetchedIncomes: Transaction[] = transactions
          .filter((item: any) => item.type !== 'costs')
          .map((item: any) => ({
            id: item._id,
            name: item.category || 'Product',
            amount: item.amount,
          }));

        const fetchedCosts: Transaction[] = transactions
          .filter((item: any) => item.type === 'costs')
          .map((item: any) => ({
            id: item._id,
            name: item.category || 'Expense',
            amount: item.amount,
          }));

        setIncomes(fetchedIncomes);
        setCosts(fetchedCosts);
      } catch (error) {
        if (error.message === '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.') {
          console.log('Session expired, navigating to Login');
          navigation.navigate('LoginPage');
        } else {
          console.error('Failed to load transactions:', error);
        }
      } finally {
        setIsLoading(false);
      }
    };

    loadTransactions();
  }, [navigation]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤ (–ø–æ–∫–∏ –ª–æ–≥)
  const handleEditIncome = (id: string) => {
    console.log('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–æ—Ö—ñ–¥:', id);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤ —á–µ—Ä–µ–∑ API
  const handleDeleteIncome = async (id: string) => {
    setIsLoading(true);
    try {
      await deleteTransaction(id);
      setIncomes(incomes.filter((item) => item.id !== id));
      console.log('–î–æ—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ:', id);
    } catch (error) {
      if (error.message === '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.') {
        console.log('Session expired, navigating to Login');
        navigation.navigate('LoginPage');
      } else {
        console.error('Delete income error:', error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç (–ø–æ–∫–∏ –ª–æ–≥)
  const handleEditCost = (id: string) => {
    console.log('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É:', id);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ API
  const handleDeleteCost = async (id: string) => {
    setIsLoading(true);
    try {
      await deleteTransaction(id);
      setCosts(costs.filter((item) => item.id !== id));
      console.log('–í–∏—Ç—Ä–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞:', id);
    } catch (error) {
      if (error.message === '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.') {
        console.log('Session expired, navigating to Login');
        navigation.navigate('LoginPage');
      } else {
        console.error('Delete cost error:', error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  const handleAddTransaction = async (amount: number, category: string, type: string, date: string) => {
    setIsLoading(true);
    try {
      await createTransaction(amount, category, type, date);
      const response = await fetchTransactionsToday();
      console.log('Fetch transactions response:', response);

      const transactions = Array.isArray(response) ? response : response.data || [];
      const fetchedIncomes: Transaction[] = transactions
        .filter((item: any) => item.type !== 'costs')
        .map((item: any) => ({
          id: item._id,
          name: item.category || 'Product',
          amount: item.amount,
        }));
      const fetchedCosts: Transaction[] = transactions
        .filter((item: any) => item.type === 'costs')
        .map((item: any) => ({
          id: item._id,
          name: item.category || 'Expense',
          amount: item.amount,
        }));
      setIncomes(fetchedIncomes);
      setCosts(fetchedCosts);
      console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞:', { amount, category, type, date });
    } catch (error) {
      if (error.message === '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.') {
        console.log('Session expired, navigating to Login');
        navigation.navigate('LoginPage');
      } else {
        console.error('Add transaction error:', error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É
  const handleProfilePress = () => {
    navigation.navigate('LoginPage');
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ HomePage
  const handleCalendarPress = () => {
    navigation.navigate('HomePage');
  };

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º
  const totalIncome = incomes.reduce((sum, item) => sum + item.amount, 0);
  const totalCosts = costs.reduce((sum, item) => sum + item.amount, 0);
  const budget = 0 + totalIncome - totalCosts;

  return (
    <View style={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <TouchableOpacity style={styles.iconButton} onPress={handleCalendarPress}>
            <Text style={styles.iconText}>üìÖ</Text>
          </TouchableOpacity>
          <Text style={styles.dateText}>18 May</Text>
        </View>
        <TouchableOpacity style={styles.iconButton}>
          <Text style={styles.iconText}>‚ù§Ô∏è</Text>
        </TouchableOpacity>
      </View>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <View style={styles.tabs}>
        <TouchableOpacity style={[styles.tab, styles.activeTab]}>
          <Text style={[styles.tabText, styles.activeTabText]}>Day</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.tab}>
          <Text style={styles.tabText}>Week</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.tab}>
          <Text style={styles.tabText}>Month</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.tab}>
          <Text style={styles.tabText}>Year</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.tab}>
          <Text style={styles.tabText}>All</Text>
        </TouchableOpacity>
      </View>

      {/* –°–µ–∫—Ü—ñ—è –¥–æ—Ö–æ–¥—ñ–≤ */}
      <IncomeList
        incomes={incomes}
        onEdit={handleEditIncome}
        onDelete={handleDeleteIncome}
        onAdd={() => setIncomeModalVisible(true)}
        totalIncome={totalIncome}
      />

      {/* –°–µ–∫—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç */}
      <CostList
        costs={costs}
        onEdit={handleEditCost}
        onDelete={handleDeleteCost}
        onAdd={() => setCostModalVisible(true)}
        totalCosts={totalCosts}
      />

      {/* –ë—é–¥–∂–µ—Ç */}
      <View style={styles.budgetSection}>
        <View style={styles.budgetContainer}>
          <Text style={styles.budgetText}>
            Budget: 0 + {totalIncome} - {totalCosts} = {budget}$
          </Text>
          <View style={styles.budgetIndicator}>
            <View
              style={[
                styles.budgetBar,
                {
                  width: `${Math.min(Math.abs(budget) / 1000 * 100, 100)}%`,
                  backgroundColor: budget >= 0 ? '#4CAF50' : '#ff4d4d',
                },
              ]}
            />
          </View>
        </View>
        <TouchableOpacity style={styles.iconButton} onPress={handleProfilePress}>
          <Text style={styles.iconText}>üë§</Text>
        </TouchableOpacity>
      </View>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –¥–æ—Ö–æ–¥—ñ–≤ */}
      <AddTransactionModal
        visible={isIncomeModalVisible}
        onClose={() => setIncomeModalVisible(false)}
        onAdd={handleAddTransaction}
        transactionType="income"
        title="–î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥"
        navigation={navigation}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç */}
      <AddTransactionModal
        visible={isCostModalVisible}
        onClose={() => setCostModalVisible(false)}
        onAdd={handleAddTransaction}
        transactionType="costs"
        title="–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"
        navigation={navigation}
      />

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ) */}
      {isLoading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#5a8a9a" />
        </View>
      )}
    </View>
  );
};

export default DayPage;